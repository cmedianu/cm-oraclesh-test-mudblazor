@using global::Features.Client
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@page "/clients"
@inject ClientService ClientService
@inject NavigationManager Navigation

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">Clients</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo("/clients/edit/new"))">New Client</MudButton>
    <MudTextField @bind-Value="searchTerm" Placeholder="Search..." Class="mb-4 mt-4" Immediate="true" OnKeyDown="OnSearchKeyDown" />
    <div class="always-show-scrollbar">
        <MudDataGrid @ref="dataGridRef"
                     T="ClientDto"
                     ServerData="LoadServerData"
                     RowsPerPage="10"
                     Class="mt-4"
                     Loading="@loading"
                     RowClick="OnRowClick"
                     Filterable="false"
                     SortMode="SortMode.Single"
                     Dense="true">
            <Columns>
                <PropertyColumn Property="x => x.CustId" Title="Id" Sortable="true" />
                <PropertyColumn Property="x => x.CustFirstName" Title="First Name" Sortable="true" />
                <PropertyColumn Property="x => x.CustLastName" Title="Last Name" Sortable="true" />
                <TemplateColumn Title="Gender" Property="x => x.CustGender">
                    <HeaderTemplate>
                        <div style="display: flex; flex-direction: column; align-items: flex-start; gap: 4px;">
                            <MudText Typo="Typo.subtitle2">Gender</MudText>
                            <MudSelect T="string" @bind-Value="selectedGender" Dense="true" Placeholder="Gender" Style="min-width: 100px;">
                                <MudSelectItem T="string" Value="@(string.Empty)">All</MudSelectItem>
                                @foreach (var gender in genderOptions)
                                {
                                    <MudSelectItem T="string" Value="@gender">@gender</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                    </HeaderTemplate>
                    <CellTemplate>
                        @context.Item.CustGender
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.CustYearOfBirth" Title="Year of Birth" Sortable="true" />
                <PropertyColumn Property="x => x.CustMaritalStatus" Title="Marital Status" Sortable="true" />
                <PropertyColumn Property="x => x.CustCity" Title="City" Sortable="true" />
                <PropertyColumn Property="x => x.CustStateProvince" Title="State/Province" Sortable="true" />
                <PropertyColumn Property="x => x.CountryName" Title="Country" Sortable="true" />
                <PropertyColumn Property="x => x.CustEmail" Title="Email" Sortable="true" />
                <PropertyColumn Property="x => x.CustMainPhoneNumber" Title="Phone" Sortable="true" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ClientDto" PageSizeOptions="new int[] { 10, 20, 50, 100 }" />
            </PagerContent>
            <NoRecordsContent>
                <MudText Typo="Typo.body1">No clients found.</MudText>
            </NoRecordsContent>
        </MudDataGrid>
    </div>
</MudPaper>

@code {
    private string searchTerm = string.Empty;
    private bool loading = false;
    private MudDataGrid<ClientDto> dataGridRef;

    private List<string> genderOptions = new();
    private string _selectedGender = string.Empty;
    private string selectedGender
    {
        get => _selectedGender;
        set
        {
            if (_selectedGender != value)
            {
                _selectedGender = value;
                _ = ReloadData();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        genderOptions = await ClientService.GetDistinctGendersAsync();
    }

    private async Task<GridData<ClientDto>> LoadServerData(GridState<ClientDto> state)
    {
        loading = true;
        var sort = "CustId";
        var sortDesc = false;
        var firstSort = state.SortDefinitions?.FirstOrDefault();
        if (firstSort != null)
        {
            // Use Field property if available, otherwise fallback to parsing
            var fieldProp = firstSort.GetType().GetProperty("SortBy");
            if (fieldProp != null)
            {
                var fieldValue = fieldProp.GetValue(firstSort) as string;
                if (!string.IsNullOrEmpty(fieldValue))
                    sort = fieldValue;
            }
            else
            {
                var expr = firstSort.ToString();
                if (!string.IsNullOrEmpty(expr) && expr.Contains("=>"))
                {
                    var parts = expr.Split("=>");
                    if (parts.Length == 2)
                    {
                        var propPart = parts[1].Trim(); // "x.CustFirstName"
                        var dotIdx = propPart.IndexOf('.');
                        if (dotIdx >= 0 && dotIdx < propPart.Length - 1)
                            sort = propPart.Substring(dotIdx + 1);
                    }
                }
            }
            sortDesc = firstSort.Descending;
        }
        var filters = new Dictionary<string, string>();
        if (!string.IsNullOrWhiteSpace(selectedGender))
        {
            filters["CustGender"] = selectedGender;
        }
        var result = await ClientService.GetClientsAsync(state.Page + 1, state.PageSize, searchTerm, sort, sortDesc, filters);
        loading = false;
        return new GridData<ClientDto> { Items = result.Items.ToList(), TotalItems = result.TotalCount };
    }

    private void OnRowClick(DataGridRowClickEventArgs<ClientDto> args)
    {
        Navigation.NavigateTo($"/clients/edit/{args.Item.CustId}");
    }

    private async Task OnSearchKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && dataGridRef != null)
        {
            await dataGridRef.ReloadServerData();
        }
    }

    private async Task ReloadData()
    {
        if (dataGridRef != null)
        {
            await dataGridRef.ReloadServerData();
        }
    }
} 